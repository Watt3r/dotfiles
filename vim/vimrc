syntax on

set ruler
set updatetime=100
set nocompatible
set ai
set expandtab
set shiftwidth=2
set softtabstop=2
set breakindent
set autoindent
set bg=dark
set ignorecase
set smartcase
set smarttab
set smartindent
set incsearch
set backspace=eol,indent,start
set laststatus=2
set noshowmode
set noerrorbells
set nowrap
set updatetime=50
set so=7
set history=500
set wildmode=longest,list,full
set wildmenu
set number

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

autocmd BufEnter * :syntax sync fromstart

filetype plugin indent on

nmap <leader>D <plug>(YCMHover)
nmap <F9> :TagbarToggle<CR>
nmap <leader>e :lnext<CR>
nmap gr :GoReferrers<CR>
vnoremap <leader>u "0y:%s/<C-r>0/<C-R>=substitute(system('uuidgen'), '\n$','', '')<CR>/g<CR>
vnoremap <leader>c :CarbonNowSh<CR>

nnoremap <leader>dd :Lexplore %:p:h<CR>
nnoremap <Leader>da :Lexplore<CR>


nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


function! RunCoverageForCurrentFile()
    let l:filetype = &filetype

    if !exists('b:coverageEnabled')
        let b:coverageEnabled = 0
    endif

    if l:filetype ==# 'go'
        :GoCoverageToggle -gcflags=-l<CR>
        let b:coverageEnabled = !b:coverageEnabled
    elseif l:filetype ==# 'python'
        if !b:coverageEnabled
            :!pytest --cov=.
        endif
        :CoverageToggle
        let b:coverageEnabled = !b:coverageEnabled
    else
        echo "Coverage tool for this filetype is not defined."
    endif
endfunction

nmap T :call RunCoverageForCurrentFile()<CR>

function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>


let g:ycm_auto_hover=''
let g:airline_powerline_fonts = 1

au FileType markdown vmap <leader><Bar> :EasyAlign*<Bar><Enter>
au FileType cucumber vmap <leader><Bar> :EasyAlign*<Bar><Enter>

autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')

let test#strategy = "vimterminal"

nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>


let g:netrw_banner = 0
let g:netrw_winsize = 40
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4

let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
" ALE linter only run on save
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
" don't have linters run on opening a file
let g:ale_lint_on_enter = 0
let g:ale_virtualtext_cursor = 'disabled'


let g:tagbar_autoclose = 0 

let g:tagbar_type_solidity = {
    \ 'ctagstype': 'solidity',
    \ 'kinds' : [
        \ 'c:contracts',
        \ 'e:events',
        \ 'f:functions',
        \ 'm:mappings',
        \ 'v:variables',
    \ ]
\ }
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()


if !has('gui_running')
  set t_Co=256
endif
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }

let g:carbon_now_sh_options = {
\  'ln': 'true',
\  'bg': 'rgba(45,49,59,0.4)',
\  't': 'one-dark',
\  'wt': 'none',
\  'ds': 'true',
\  'dsyoff': '20px',
\  'dsblur': '68px',
\  'wc': 'true',
\  'wa': 'true',
\  'pv': '56px',
\  'ph': '56px',
\  'fm': 'Hack',
\  'fs': '14.5px',
\  'lh': '141%',
\  'si': 'false',
\  'es': '2x',
\  'wm': 'false'
\}
