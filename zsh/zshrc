ZSH_DISABLE_COMPFIX=true

export PATH=$PATH:$(go env GOPATH)/bin:~/.npm-global/bin

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="agnoster"
# Stop agnoster from showing default hostname
DEFAULT_USER=lucasoberwager

# Set bat theme
alias cat="bat"
alias bat="bat --theme=gruvbox-dark"

# Set custom aliases
source ~/.zshaliases

# Load 1password plugins
source "$HOME/.config/op/plugins.sh"

# Load NVM
# Slows down startup, node works just fine without it normally
# [[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh  # This loads NVM

# Case insensitive globbing
setopt NO_CASE_GLOB

# History 
setopt EXTENDED_HISTORY
SAVEHIST=5000
HISTSIZE=2000
# share history across multiple zsh sessions
setopt SHARE_HISTORY
# append to history
setopt APPEND_HISTORY
# adds commands as they are typed, not at shell exit
setopt INC_APPEND_HISTORY
# expire duplicates first
setopt HIST_EXPIRE_DUPS_FIRST
# do not store duplications
setopt HIST_IGNORE_DUPS
# removes blank lines from history
setopt HIST_REDUCE_BLANKS
# Change up/down history
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search
# Alt-left and Alt-right move words
bindkey '^[^[[D' backward-word
bindkey '^[^[[C' forward-word

# Confirm autocorrect
setopt CORRECT
setopt CORRECT_ALL

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git z zsh-syntax-highlighting yarn-autocompletions)

source $ZSH/oh-my-zsh.sh

# Pyenv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

export VIRTUAL_ENV_DISABLE_PROMPT=1
ORIGINAL_PS1=$PS1

# Function to modify the prompt when a venv is activated
prompt_virtualenv() {
  if [[ -n "$VIRTUAL_ENV" ]]; then
      local venv_glyph="(λ)"
      local divider=""
      export PS1="%{$fg[black]%}%{$bg[magenta]%}$venv_glyph%{$fg[magenta]%}%{$bg[blue]%}$divider%{$reset_color%}$ORIGINAL_PS1"
  fi
}

# Function to manage the activation and deactivation of the venv
python_venv() {
  MYVENV=./venv
  if [[ -d $MYVENV ]]; then
    source $MYVENV/bin/activate > /dev/null 2>&1
    prompt_virtualenv
  else
    if [[ -n "$VIRTUAL_ENV" ]]; then
      deactivate > /dev/null 2>&1
      export PS1=$ORIGINAL_PS1
    fi
  fi
}

autoload -U add-zsh-hook
add-zsh-hook chpwd python_venv

python_venv


# Kubectl completion
[[ $commands[kubectl] ]] && source <(kubectl completion zsh)
